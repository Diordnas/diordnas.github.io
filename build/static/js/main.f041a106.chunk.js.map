{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["chart","Form","props","chartRef","React","createRef","state","handleChange","bind","calculate","event","name","target","value","this","setState","labels","data","i","balance","currentBalance","push","income","expenditure","Math","round","result","destroy","myChartRef","current","getContext","Chart","defaults","global","defaultFontFamily","type","datasets","label","backgroundColor","options","className","onChange","onClick","id","ref","Component","App","style","margin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAGIA,E,gHAEiBC,E,YAGjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAHVC,SAAWC,IAAMC,YAIb,EAAKC,MAAQ,GAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBALH,E,0EAQLE,GACT,IAAMC,EAAOD,EAAME,OAAOD,KACpBE,EAAQH,EAAME,OAAOC,MAE3BC,KAAKC,SAAL,eACKJ,EAAOE,M,kCAYZ,IAPA,IAEIG,EAAS,GACTC,EAAO,GAEPC,EAAI,EACJC,GAAWL,KAAKR,MAAMc,eACnBD,EAAU,GAAKD,EAPA,KAQlBF,EAAOK,KAAKH,GACZD,EAAKI,KAAKF,GACVA,GAAWA,IAAYL,KAAKR,MAAMgB,OAAO,KACzCH,IAAYL,KAAKR,MAAMiB,YACvBJ,EAAUK,KAAKC,MAAgB,IAAVN,GAAe,IACpCD,IAbkB,MAelBA,EACAJ,KAAKC,SAAS,CAACW,OAAO,uCAAD,OAhBH,IAgBG,aAErBV,EAAOK,KAAKH,GACZD,EAAKI,KAAK,GACVP,KAAKC,SAAS,CAACW,OAAO,mCAAD,OAAqCR,EAArC,aAGtBlB,GACCA,EAAM2B,UAGV,IAAIC,EAAad,KAAKX,SAAS0B,QAAQC,WAAW,MAClDC,IAAMC,SAASC,OAAOC,kBAAoB,aAC1ClC,EAAQ,IAAI+B,IAAMH,EAAY,CAC1BO,KAAM,OACNlB,KAAM,CAEFD,OAAQA,EACRoB,SAAU,CACN,CACIC,MAAO,UACPpB,KAAMA,EACNqB,gBAAiB,yBAI7BC,QAAS,O,+BASb,OACI,6BACI,6BACA,8BACI,uBAAGC,UAAU,eAAb,qBACA,2BAAOL,KAAK,SAASxB,KAAK,iBAAiB8B,SAAU3B,KAAKP,aAAciC,UAAU,UAClF,6BAAS,6BACT,uBAAGA,UAAU,eAAb,0BACA,2BAAOL,KAAK,SAASxB,KAAK,cAAc8B,SAAU3B,KAAKP,aAAciC,UAAU,UAC/E,6BAAS,6BACT,uBAAGA,UAAU,eAAb,qBACA,2BAAOL,KAAK,SAASxB,KAAK,SAAS8B,SAAU3B,KAAKP,aAAciC,UAAU,UAC1E,6BAAS,8BAGb,6BAEA,yBAAKA,UAAU,aACX,4BAAQE,QAAS5B,KAAKL,WAAtB,cACA,2BAAIK,KAAKR,MAAMoB,SAGnB,yBAAKc,UAAU,SACX,4BACIG,GAAG,UACHC,IAAK9B,KAAKX,iB,GAjGA0C,aCUnBC,MAXf,WACE,OACE,oCACE,yBAAKC,MAAO,CAACT,gBAAgB,QAASU,OAAQ,QAC5C,wBAAIR,UAAU,YAAd,iCACA,kBAAC,EAAD,SCGYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f041a106.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Chart from \"../../node_modules/chart.js\"\r\n\r\nvar chart;\r\n\r\nexport default class Form extends Component {\r\n    chartRef = React.createRef();\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.calculate = this.calculate.bind(this);\r\n    }\r\n    \r\n    handleChange(event) {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n      \r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    calculate() {\r\n        const maxIterations = 100;\r\n\r\n        var labels = [];\r\n        var data = [];\r\n\r\n        var i = 0;\r\n        var balance = +this.state.currentBalance;\r\n        while (balance > 0 && i < maxIterations){\r\n            labels.push(i);\r\n            data.push(balance);\r\n            balance += balance * (+this.state.income/100);\r\n            balance -= +this.state.expenditure;\r\n            balance = Math.round(balance * 100)/100 //Round to 2 dp\r\n            i++;\r\n        }\r\n        if (i === maxIterations){\r\n            this.setState({result: `Your savings will not run out after ${maxIterations} years`});\r\n        } else {\r\n            labels.push(i);\r\n            data.push(0);\r\n            this.setState({result: `Your savings will run out after ${i} years`});\r\n        }\r\n\r\n        if(chart){\r\n            chart.destroy();\r\n        }\r\n\r\n        var myChartRef = this.chartRef.current.getContext(\"2d\");\r\n        Chart.defaults.global.defaultFontFamily = \"Montserrat\";\r\n        chart = new Chart(myChartRef, {\r\n            type: \"line\",\r\n            data: {\r\n                //Bring in data\r\n                labels: labels,\r\n                datasets: [\r\n                    {\r\n                        label: \"Balance\",\r\n                        data: data,\r\n                        backgroundColor: 'rgba(0,183,199,0.3)',\r\n                    }\r\n                ]\r\n            },\r\n            options: {\r\n                \r\n            }\r\n        });\r\n\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <br></br>\r\n                <form>\r\n                    <p className=\"inputHeader\">Current Balance: </p>\r\n                    <input type='number' name='currentBalance' onChange={this.handleChange} className='input'></input>\r\n                    <br></br><br></br>\r\n                    <p className=\"inputHeader\">Expenditure per Year: </p>\r\n                    <input type='number' name='expenditure' onChange={this.handleChange} className='input'></input>\r\n                    <br></br><br></br>\r\n                    <p className=\"inputHeader\">Income per Year: </p>\r\n                    <input type='number' name='income' onChange={this.handleChange} className='input'></input>\r\n                    <br></br><br></br> \r\n                </form>\r\n\r\n                <br></br>\r\n\r\n                <div className=\"buttonDiv\">\r\n                    <button onClick={this.calculate}>Calculate!</button>\r\n                    <p>{this.state.result}</p>\r\n                </div>\r\n\r\n                <div className=\"chart\">\r\n                    <canvas\r\n                        id=\"myChart\"\r\n                        ref={this.chartRef}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Form from './components/Form'\n\nfunction App() {\n  return (\n    <>\n      <div style={{backgroundColor:\"white\", margin: '0px'}}>\n        <h1 className=\"blueText\">When Will My Savings Run Out?</h1>\n        <Form></Form>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}